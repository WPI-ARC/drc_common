/* Auto-generated by genmsg_cpp for file /home/nick/Dropbox/ROS_Workspace/drc_common/feedback_devices/msg/BrakeForce.msg */
#ifndef FEEDBACK_DEVICES_MESSAGE_BRAKEFORCE_H
#define FEEDBACK_DEVICES_MESSAGE_BRAKEFORCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace feedback_devices
{
template <class ContainerAllocator>
struct BrakeForce_ {
  typedef BrakeForce_<ContainerAllocator> Type;

  BrakeForce_()
  : braking(0.0)
  {
  }

  BrakeForce_(const ContainerAllocator& _alloc)
  : braking(0.0)
  {
  }

  typedef float _braking_type;
  float braking;


  typedef boost::shared_ptr< ::feedback_devices::BrakeForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feedback_devices::BrakeForce_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BrakeForce
typedef  ::feedback_devices::BrakeForce_<std::allocator<void> > BrakeForce;

typedef boost::shared_ptr< ::feedback_devices::BrakeForce> BrakeForcePtr;
typedef boost::shared_ptr< ::feedback_devices::BrakeForce const> BrakeForceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::feedback_devices::BrakeForce_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::feedback_devices::BrakeForce_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace feedback_devices

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::feedback_devices::BrakeForce_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::feedback_devices::BrakeForce_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::feedback_devices::BrakeForce_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e26225f002321acda041fe30fccdfc59";
  }

  static const char* value(const  ::feedback_devices::BrakeForce_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe26225f002321acdULL;
  static const uint64_t static_value2 = 0xa041fe30fccdfc59ULL;
};

template<class ContainerAllocator>
struct DataType< ::feedback_devices::BrakeForce_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feedback_devices/BrakeForce";
  }

  static const char* value(const  ::feedback_devices::BrakeForce_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::feedback_devices::BrakeForce_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 braking\n\
\n\
";
  }

  static const char* value(const  ::feedback_devices::BrakeForce_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::feedback_devices::BrakeForce_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::feedback_devices::BrakeForce_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.braking);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BrakeForce_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::feedback_devices::BrakeForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::feedback_devices::BrakeForce_<ContainerAllocator> & v) 
  {
    s << indent << "braking: ";
    Printer<float>::stream(s, indent + "  ", v.braking);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FEEDBACK_DEVICES_MESSAGE_BRAKEFORCE_H

