/* Auto-generated by genmsg_cpp for file /home/nick/Dropbox/ROS_Workspace/drc_common/feedback_devices/msg/tacta_hydra.msg */
#ifndef FEEDBACK_DEVICES_MESSAGE_TACTA_HYDRA_H
#define FEEDBACK_DEVICES_MESSAGE_TACTA_HYDRA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace feedback_devices
{
template <class ContainerAllocator>
struct tacta_hydra_ {
  typedef tacta_hydra_<ContainerAllocator> Type;

  tacta_hydra_()
  : header()
  , freq()
  , amp()
  {
    freq.assign(0);
    amp.assign(0);
  }

  tacta_hydra_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , freq()
  , amp()
  {
    freq.assign(0);
    amp.assign(0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array<int32_t, 2>  _freq_type;
  boost::array<int32_t, 2>  freq;

  typedef boost::array<int32_t, 2>  _amp_type;
  boost::array<int32_t, 2>  amp;

  enum { LEFT = 0 };
  enum { RIGHT = 1 };
  enum { FREQ_ON = 255 };
  enum { FREQ_CRUSH = 1 };
  enum { FREQ_SLIP = 5 };
  enum { FREQ_OFF = 0 };

  typedef boost::shared_ptr< ::feedback_devices::tacta_hydra_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::feedback_devices::tacta_hydra_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct tacta_hydra
typedef  ::feedback_devices::tacta_hydra_<std::allocator<void> > tacta_hydra;

typedef boost::shared_ptr< ::feedback_devices::tacta_hydra> tacta_hydraPtr;
typedef boost::shared_ptr< ::feedback_devices::tacta_hydra const> tacta_hydraConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::feedback_devices::tacta_hydra_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::feedback_devices::tacta_hydra_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace feedback_devices

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::feedback_devices::tacta_hydra_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::feedback_devices::tacta_hydra_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::feedback_devices::tacta_hydra_<ContainerAllocator> > {
  static const char* value() 
  {
    return "705d4d3a802020d08354e99414158546";
  }

  static const char* value(const  ::feedback_devices::tacta_hydra_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x705d4d3a802020d0ULL;
  static const uint64_t static_value2 = 0x8354e99414158546ULL;
};

template<class ContainerAllocator>
struct DataType< ::feedback_devices::tacta_hydra_<ContainerAllocator> > {
  static const char* value() 
  {
    return "feedback_devices/tacta_hydra";
  }

  static const char* value(const  ::feedback_devices::tacta_hydra_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::feedback_devices::tacta_hydra_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint8 LEFT=0\n\
uint8 RIGHT=1\n\
\n\
uint8 FREQ_ON=255\n\
uint8 FREQ_CRUSH=1\n\
uint8 FREQ_SLIP=5\n\
uint8 FREQ_OFF=0\n\
\n\
Header header\n\
\n\
int32[2] freq\n\
int32[2] amp\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::feedback_devices::tacta_hydra_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::feedback_devices::tacta_hydra_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::feedback_devices::tacta_hydra_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::feedback_devices::tacta_hydra_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.freq);
    stream.next(m.amp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct tacta_hydra_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::feedback_devices::tacta_hydra_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::feedback_devices::tacta_hydra_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "freq[]" << std::endl;
    for (size_t i = 0; i < v.freq.size(); ++i)
    {
      s << indent << "  freq[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.freq[i]);
    }
    s << indent << "amp[]" << std::endl;
    for (size_t i = 0; i < v.amp.size(); ++i)
    {
      s << indent << "  amp[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.amp[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // FEEDBACK_DEVICES_MESSAGE_TACTA_HYDRA_H

